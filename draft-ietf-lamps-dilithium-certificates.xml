<?xml version='1.0' encoding='utf-8'?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
    please see http://xml.resource.org/authoring/README.html. -->
<rfc
      xmlns:xi="http://www.w3.org/2001/XInclude"
      category="std"
      consensus="true"
      docName="draft-ietf-lamps-dilithium-certificates-latest"
      ipr="trust200902"
      obsoletes=""
      updates=""
      submissionType="IETF"
      xml:lang="en"
      tocInclude="true"
      tocDepth="4"
      symRefs="true"
      sortRefs="true"
      version="3">
  <!-- xml2rfc v2v3 conversion 2.38.1 -->
  <!-- category values: std, bcp, info, exp, and historic
    ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
       or pre5378Trust200902
    you can add the attributes updates="NNNN" and obsoletes="NNNN"
    they will automatically be output with "(if approved)" -->
 <!-- ***** FRONT MATTER ***** -->
 <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
        full title is longer than 39 characters -->
   <title abbrev="ML-DSA for Certificates">Internet X.509 Public Key Infrastructure: Algorithm Identifiers for ML-DSA</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-lamps-dilithium-certificates-latest"/>
    <!-- add 'role="editor"' below for the editors if appropriate -->
   <author fullname="Jake Massimo" initials="J." surname="Massimo">
      <organization>AWS</organization>
      <address>
        <postal>
          <street/>
          <!-- Reorder these if your country does things differently -->
          <region/>
          <code/>
          <country>USA</country>
        </postal>
        <email>jakemas@amazon.com</email>
        <!-- uri and facsimile elements may also be added -->
     </address>
    </author>
    <author fullname="Panos Kampanakis" initials="P." surname="Kampanakis">
      <organization>AWS</organization>
      <address>
        <postal>
          <street/>
          <!-- Reorder these if your country does things differently -->
          <region/>
          <code/>
          <country>USA</country>
        </postal>
        <email>kpanos@amazon.com</email>
        <!-- uri and facsimile elements may also be added -->
     </address>
    </author>
    <author fullname="Sean Turner" initials="S." surname="Turner">
      <organization>sn3rd</organization>
      <address>
        <email>sean@sn3rd.com</email>
        <!-- uri and facsimile elements may also be added -->
     </address>
    </author>
    <author fullname="Bas Westerbaan" initials="B.E." surname="Westerbaan">
      <organization>Cloudflare</organization>
      <address>
        <email>bas@cloudflare.com</email>
        <!-- uri and facsimile elements may also be added -->
     </address>
    </author>
    <date year="2024"/>
    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
        in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->
   <!-- Meta-data Declarations -->
   <area>Security</area>
    <workgroup>LAMPS WG</workgroup>
    <!-- WG name at the upperleft corner of the doc,
        IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
        which is used by the RFC Editor as a nod to the history of the IETF. -->
   <keyword>PQ Signatures, post-quantum X.509</keyword>
    <!-- Keywords will be incorporated into HTML output
        files in a meta tag but they have no effect on text or nroff
        output. If you submit your draft to the RFC Editor, the
        keywords will be used for the search engine. -->
   <abstract>
      <t>Digital signatures are used within X.509 certificates, Certificate Revocation Lists (CRLs),
	      and to sign messages. This document describes the conventions for using FIPS 204, the
      Module-Lattice-Based Digital Signature Algorithm (ML-DSA) in Internet X.509 certificates
	      and certificate revocation lists.  The conventions for the associated signatures, subject
	      public keys, and private key are also described.</t>
    </abstract>
  </front>
  <middle>
    <section numbered="true" toc="default">
      <name>Introduction</name>
      <t>The Module-Lattice-Based Digital Signature Algorithm (ML-DSA) is a quantum-resistant
	      digital signature scheme standardized by the US National Institute of Standards
	      and Technology (NIST) PQC project <xref target="NIST-PQC" format="default"></xref>
	      in <xref target="FIPS204" format="default"></xref>. This document specifies
	      the use of the ML-DSA in Public Key Infrastructure X.509 (PKIX) certificates and
	      Certificate Revocation Lists (CRLs) at three security levels: ML-DSA-44, ML-DSA-65,
	      and ML-DSA-87.</t>
      <t>This specification includes conventions for the signatureAlgorithm, signatureValue,
	      signature, and subjectPublicKeyInfo fields within Internet X.509 certificates and
	      CRLs <xref target="RFC5280" format="default"></xref> for ML-DSA, like
	      <xref target="RFC3279" format="default"></xref> did for classic cryptography and
	      <xref target="RFC5480" format="default"></xref> did for elliptic curve cryptography.
	      The private key format is also specified.</t>
      <section numbered="true" toc="default">
        <name>ASN.1 Module and ML-DSA Identifiers</name>
        <t>An ASN.1 module <xref target="X680"/> is included for reference purposes. Note that as per <xref target="RFC5280"/>,
		certificates use the Distinguished Encoding Rules; see <xref target="X690"/>. Also note that NIST
		defined the object identifiers for the ML-DSA algorithms in an ASN.1 module; see
		(TODO insert reference).</t>
      </section> <!-- ASN.1 Moudule and ML-DSA Identifiers -->
      <section numbered="true" toc="default">
        <name>Requirements Language</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
		"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
		document are to be interpreted as described in BCP 14 <xref target="RFC2119" />
		<xref target="RFC8174" /> when, and only when, they appear in all capitals, as shown here.</t>
      </section> <!-- End of Requirements Language Section -->
    </section> <!-- End of Introduction Section -->

    <section numbered="true" toc="default" anchor="oids">
      <name>Identifiers</name>
      <t>The AlgorithmIdentifier type, which is included herein for convenience, is defined as follows:</t>
       <sourcecode type="asn.1">
   AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet} ::=
     SEQUENCE {
       algorithm   ALGORITHM-TYPE."&amp;"id({AlgorithmSet}),
       parameters  ALGORITHM-TYPE.
                     "&amp;"Params({AlgorithmSet}{@algorithm}) OPTIONAL
     }
       </sourcecode>
       <aside>
       <t>NOTE: The above syntax is from <xref target="RFC5912"/> and is compatible with the 2021 ASN.1 syntax <xref target="X680"/>}. See
	       <xref target="RFC5280"/> for the 1988 ASN.1 syntax.</t>
       </aside>
       <t>The fields in AlgorithmIdentifier have the following meanings:</t>
       <ul>
       <li>algorithm identifies the cryptographic algorithm with an object identifier.</li>
       <li>parameters, which are optional, are the associated parameters for the algorithm identifier in the algorithm field.</li>
       </ul>
       <t>The OIDs are:</t>
       <sourcecode type="asn.1" markers="false">
   id-ML-DSA-44 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
            country(16) us(840) organization(1) gov(101) csor(3)
            nistAlgorithm(4) sigAlgs(3) id-ml-dsa-44(17) }
       </sourcecode>
       <sourcecode type="asn.1" markers="false">
   id-ML-DSA-65 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
            country(16) us(840) organization(1) gov(101) csor(3)
            nistAlgorithm(4) sigAlgs(3) id-ml-dsa-65(18) }
       </sourcecode>
       <sourcecode type="asn.1" markers="false">
   id-ML-DSA-87 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2)
            country(16) us(840) organization(1) gov(101) csor(3)
            nistAlgorithm(4) sigAlgs(3) id-ml-dsa-87(19) }
       </sourcecode>
       <t>The contents of the parameters component for each algorithm <bcp14>MUST</bcp14> be absent.</t>
    </section> <!-- End of Identifiers Section -->

    <section numbered="true" toc="default">
      <name>ML-DSA Signatures in PKIX</name>
      <t>ML-DSA is a digital signature scheme built upon the Fiat-Shamir-with-aborts framework
	      <xref target="Fiat-Shamir" format="default"></xref>. The security is based upon
	      the hardness of lattice problems over module lattices <xref target="Dilithium" format="default"></xref>.
	      ML-DSA provides three parameter sets for the NIST PQC security categories 2, 3 and 5.</t>
      <t>Signatures are used in a number of different ASN.1 structures. As shown in the ASN.1
	      representation from <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>
	      below, in an X.509 certificate, a signature is encoded with an algorithm identifier
	      in the signatureAlgorithm attribute and a signatureValue attribute that contains the actual signature.</t>
      <sourcecode type="asn.1" markers="false">
   Certificate  ::=  SEQUENCE  {
      tbsCertificate       TBSCertificate,
      signatureAlgorithm   AlgorithmIdentifier,
      signatureValue       BIT STRING  }
      </sourcecode>
      <t>Signatures are also used in the CRL list ASN.1 representation from
	      <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> below.
	      In a X.509 CRL, a signature is encoded with an algorithm identifier in the signatureAlgorithm
	      attribute and a signatureValue attribute that contains the actual signature.</t>
      <sourcecode type="asn.1" markers="false">
   CertificateList  ::=  SEQUENCE  {
      tbsCertList          TBSCertList,
      signatureAlgorithm   AlgorithmIdentifier,
      signatureValue       BIT STRING  }
      </sourcecode>
      <t>The identifiers defined in <xref target="oids" format="default"/> can be used as the AlgorithmIdentifier
	      in the signatureAlgorithm field in the sequence Certificate/CertificateList and the signature field
	      in the sequence TBSCertificate/TBSCertList in certificates and CRLs, respectively,
	      <xref target="RFC5280" format="default"/>. The parameters of these signature algorithms <bcp14>MUST</bcp14> be absent,
	      as explained in <xref target="oids" format="default" sectionFormat="of" derivedContent="Section 3"/>.</t>
      <t>The signatureValue field contains the corresponding ML-DSA signature computed upon the ASN.1 DER encoded
	      tbsCertificate/tbsCertList <xref target="RFC5280" format="default"/>.</t>
      <t>Conforming Certification Authority (CA) implementations <bcp14>MUST</bcp14> specify the algorithms explicitly
	      by using the OIDs specified in <xref target="oids" format="default" sectionFormat="of" derivedContent="Section 3"/>
	      when encoding ML-DSA signatures in certificates and CRLs. Conforming client implementations that process
	      certificates and CRLs using ML-DSA <bcp14>MUST</bcp14> recognize the corresponding OIDs. Encoding rules
	      for ML-DSA signature values are specified <xref target="oids" format="default" sectionFormat="of" derivedContent="Section 3"/>.</t>
      <t>When the id-ML-DSA identifier appears in the algorithm field as an AlgorithmIdentifier, the encoding <bcp14>MUST</bcp14>
	      omit the parameters field. That is, the AlgorithmIdentifier <bcp14>SHALL</bcp14> be a SEQUENCE of one component,
	      the OID id-ML-DSA.</t>
      </section> <!-- End of Dilithium Signatures in PKIX Section -->

      <section anchor="mldsapublickey" numbered="true" toc="default">
        <name>ML-DSA Public Keys in PKIX</name>
        <t>In the X.509 certificate, the subjectPublicKeyInfo field has the SubjectPublicKeyInfo type, which has the following
		ASN.1 syntax: </t>
        <sourcecode type="asn.1">
  SubjectPublicKeyInfo  ::=  SEQUENCE  {
      algorithm         AlgorithmIdentifier,
      subjectPublicKey  BIT STRING
  }
        </sourcecode>
        <t> The fields in SubjectPublicKeyInfo have the following meanings:</t>
        <ul>
        <li>algorithm is the algorithm identifier and parameters for the public key (see above).</li>
        <li>subjectPublicKey contains the byte stream of the public key.  The algorithms defined in this document always encode
		the public key as TODO.</li>
        </ul>
        <t>The ML-DSA public key <bcp14>MUST</bcp14> be encoded using the ASN.1 type MLDSAPublicKey:</t>

                <!---<ul spacing="compact">
                    <li>rho: nonce</li>
                    <li>t:  a vector encoded in 320*k bytes</li>
                </ul>
                <t>The size required to hold all public key elements is therefore 32+320*k bytes, where k is the rank of the vector over the polynomial ring R_q.</t>
          -->
       <!--
      <sourcecode type="asn.1" markers="false" pn="section">
  DilithiumPublicKey ::= SEQUENCE {
      rho         OCTET STRING,      nonce/seed
      t1          OCTET STRING  }    encoded vector
      </sourcecode>
      <t>where rho is the nonce used to seed the XOF to produce the matrix A, and t1 is a vector encoded in 320*k bytes where k is the rank of the vector over the polynomial ring R_q. The size required to hold all public key elements is therefore 32+320*k bytes.</t>
        -->
        <!--[JM] I've modified the public key encoding based on Markku's comments from pqc-forum (https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/eAaiJO1qzkA/m/4eclSTZbBwAJ). On the use of a sequence tag, and separation bytes:
        "The "internal" separator bytes break verification unless both signer and verifier just implement a weakened hash-and-sign mode (or if the signer always adds the same non-standard padding bytes, or if a re-serialization step is implemented for hash computation.) Note that the additional encoding is unnecessary for X.509 interoperability; in addition to OID, the entire public key can be encoded as a single OCTET STRING (as the standard encoding is unambiguous); this also results in a 10-byte saving in certificate length."
        This is part of the discussion for Dilithium's security property of non-repudiation.
         -->
       <sourcecode type="asn.1" markers="false">
  MLDSAPublicKey ::= OCTET STRING
      </sourcecode>
      <t>where MLDSAPublicKey is a ML-DSA public key as specified by FIPS 204.
      Sizes for the three security levels are specified are given in <xref target="MLS-DSAParameters"/>.
          These parameters <bcp14>MUST</bcp14> be encoded as a single OCTET STRING.</t>
         <t>The id-ML-DSA identifier defined in <xref target="oids"/> <bcp14>MUST</bcp14> be used as the algorithm field in the
		 SubjectPublicKeyInfo sequence <xref target="RFC5280" format="default"/> to identify a ML-DSA public key.</t>
         <t>The ML-DSA public key (a concatenation of rho and t1 that is an OCTET STRING) is mapped to a subjectPublicKey (a value
		 of type BIT STRING) as follows: the most significant bit of the OCTET STRING value becomes the most significant
		 bit of the BIT STRING value, and so on; the least significant bit of the OCTET STRING becomes the least significant
		 bit of the BIT STRING. </t>

	 <t>Conforming CA implementations <bcp14>MUST</bcp14> specify the X.509 public key algorithm explicitly by using
		the OIDs specified in <xref target="oids"/> when using ML-DSA public keys in certificates and CRLs.
		Conforming client implementations that process ML-DSA public keys when processing certificates and CRLs
		<bcp14>MUST</bcp14> recognize the corresponding OIDs. </t>
        </section>  <!-- End of Dilithium Public Keys in PKIX Section -->

	<section numbered="true" toc="default">
        <name>Key Usage Bits</name>
        <t>The intended application for the key is indicated in the keyUsage certificate extension; see
		<xref target="RFC5280" sectionFormat="of" section="4.2.1.3"/>. If the keyUsage extension is present in a
		certificate that indicates id-ML-DSA in the SubjectPublicKeyInfo, then the at least one of following
		<bcp14>MUST</bcp14> be present:</t>
<artwork><![CDATA[
  digitalSignature; or
  nonRepudiation; or
  keyCertSign; or
  cRLSign.
]]></artwork>
	<t>If the keyUsage extension is present in a certificate that indicates id-ML-DSA in the SubjectPublicKeyInfo, then the following <bcp14>MUST NOT</bcp14> be present:</t>
<artwork><![CDATA[
   keyEncipherment; or
   dataEncipherment; or
   keyAgreement; or
   encipherOnly; or
   decipherOnly.
]]></artwork>
	<t>Requirements about the keyUsage extension bits defined in <xref target="RFC5280" format="default"/> still apply.</t>
        </section>
        <section numbered="true" toc="default">
        <name>ML-DSA Private Keys</name>
        <aside>
	<t>EDNOTE: This section is still under construction as we discuss the best way to formulate the private key with the wider
		working group. </t>
	</aside>
    <t>An ML-DSA private key is encoded by storing its 32-byte seed in the privateKey field as an OCTET STRING.
        FIPS 204 specifies two formats for an ML-DSA private key: a 32-byte seed and an (expanded) private key.
        The expanded private key (and public key) is computed from the seed using ML-DSA.KeyGen_internal (algorithm 6).</t>
        <t>The ASN.1 encoding for a ML-DSA private key is as follows:</t>
        <sourcecode type="asn.1" markers="false">
  MLDSAPrivateKey ::= SEQUENCE {
      version                  Version,
      privateKeyAlgorithm      PrivateKeyAlgorithmIdentifier,
      privateKey               OCTET STRING,
  }
      </sourcecode>

Appendix X contains an example of an id-ml-dsa-44 private key encoded using the textual encoding defined in <xref target="RFC7468"/>.
		
        <!-- <sourcecode type="asn.1" markers="false">
  DilithiumPrivateKey ::= SEQUENCE {
      rho         BIT STRING,         - nonce/seed
      K           BIT STRING,         - key/seed
      tr          BIT STRING,         - PRF bytes (CRH in spec.)
      s1          BIT STRING,         - vector l
      s2          BIT STRING,         - vector k
      t0          BIT STRING,         - encoded vector
      PublicKey   IMPLICIT DilithiumPublicKey OPTIONAL
  }
      </sourcecode>-->
                <!-- [JM] I'm unsure if BIT STRING is the correct data type here. Please confirm or suggest alt. -->
                <!--[JM] deterministic vs random signatures, see https://pq-crystals.org/dilithium/data/dilithium-specification-round3.pdf page 13 caption of figure 4 -->
                <!-- <t>Dilithium offers both deterministic and randomized signing. The deterministic version creates a signature based on a function of the key K and the message, whereas the randomized version instead selects these values at random. The randomized version can be invoked by leaving K as EMPTY.</t>
              -->
                <!-- [JM] section under construction. Do we need a basic description of each private key parameter? I think a breif overview (as we did for the public key would be nice to have.-->
          </section>  <!-- End of ML-DSA Private Keys Section -->
         <!-- [PK] What is this section going to include? -->
         <!-- [JM] Say NIST standardize both Dilithium and falcon, then this section would describe falcons private keys, just as we did for Dilithium above. -->
         <!-- [PK] I don't think we should do that. We should introduce one algorithm. Standardizing two without very obvious advantages is probably overhead for the whole industry. I think we should pick the one that makes sense. Commenting it out to similify draft. We can add it back. -->
        <!--<section numbered="true" toc="default">
          <name>TBD Private Keys</name>
          <t>TBD</t>
        </section> -->  <!-- End of TBD Private Keys Section -->
    <!--</section> End of Private Key Format Section -->

   <section anchor="IANA" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>Extensions in certificates and CRLs are identified using object Identifiers (OIDs). The creation and delegation of these
	      arcs is to be determined.</t>
      <t>IANA is requested to register the id-mod-pkix1-PQ-algorithms OID for the ASN.1 module identifier found in Section 5 in
	      the "SMI Security for PKIX Module Identifier" registry.</t>
    </section>  <!-- End of IANA Considerations Section -->

    <section anchor="Security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The Security Considerations section of <xref target="RFC5280" format="default"></xref> applies to this specification as well.</t>

      <!-- [JM] how deep should we go on EUF-CMA security? I don't really want to get into "games" here -->
      <!-- [PK] Not necessary. Just this paragraph is fine, if that.  -->
      <t>The digital signature scheme <!--note remove plural if only one--> defined within this document are modeled under
	      strongly existentially unforgeable under chosen message attack (SUF-CMA).
	      For the purpose of estimating security strength, it has been assumed that the attacker has access to signatures
	      for no more than 2^{64} chosen messages.</t>

      <!--<t>TODO: Add discussion about digests in classical signatures hash-then-sign and how that does not apply to PQ like Dilithium. And how committing to a message is additional security. Reference NIST discussion from Peiker and Makku.</t>-->
      <t>EDNOTE: Discuss deterministic vs randomized signing and the impact on security.</t>
      <t>ML-DSA offers both deterministic and randomized signing.
      By default ML-DSA signatures are non-deterministic.
      The private random seed (rho') for the signature is pseudorandomly derived from the signer’s private key, the message, and a 256-bit string,
	      rnd - where rnd should be generated by an approved RBG. In the deterministic version, rng is instead a 256-bit
      constant string.
      The source of randomness in the randomized mode has been "hedged" against sources of poor entropy,
	      by including the signers private key and message into the derivation. The primary purpose of rnd is to facilitate
	      countermeasures to side-channel attacks and fault attacks on deterministic signatures. </t>
      <t>EDNOTE: Discuss side-channels for ML-DSA.</t>
      <t>In the design of ML-DSA, care has been taken to make side-channel resilience easier to achieve.
      For instance, ML-DSA does not depend on Gaussian sampling.
      Implementations must still take great care not to leak information via varius side channels.
      While deliberate design decisions such as these can help to deliver a greater ease of secure implementation - particularly
	      against side-channel attacks - it does not necessarily provide resistance to more powerful attacks such as
	      differential power analysis. Some amount of side-channel leakage has been demonstrated in parts of the signing
	      algorithm (specifically the bit-unpacking function), from which a demonstration of key recovery has been made over
	      a large sample of signatures. Masking countermeasures exist for ML-DSA<!--[MGTF19]-->, but come with a performance
	      overhead.</t>

      <t>A fundamental security property also associated with digital signatures is non-repudiation. Non-repudiation refers to
	      the assurance that the owner of a signature key pair that was capable of generating an existing signature
	      corresponding to certain data cannot convincingly deny having signed the data. The digital signature scheme
	      ML-DSA possess three security properties beyond unforgeability, that are associated with non-repudiation. These
	      are exclusive ownership, message-bound signatures, and non-resignability. These properties are based tightly on
	      the assumed collision resistance of the hash function used (in this case SHAKE-256).

      Exclusive ownership is a property in which a signature sigma uniquely determines the public key and message for which it
	      is valid. Message-bound signatures is the property that a valid signature uniquely determines the message for
	      which it is valid, but not necessarily the public key. Non-resignability is the property in which one cannot
	      produce a valid signature under another key given a signature sigma for some unknown message m. These properties
	      are not provided by classical signature schemes such as DSA or ECDSA, and have led to a variety of attacks such
	      as Duplicate-Signature Key Selection (DSKS) attacks <!--[BWM99, MS04]-->, and attacks on the protocols for secure
	      routing<!--[JCCS19]-->. A full discussion of these properties in ML-DSA can be found at
	      <xref target="CDFFJ21" format="default"></xref>.

      These properties are dependent, in part, on unambiguous public key serialization. It for this reason the public key
	      structure defined in <xref target="mldsapublickey" format="default"/> is intentionally encoded as a single
	      OCTET STRING.</t>
    </section>  <!-- End of Security Considerations Section -->
  </middle>
  <!--  *****BACK MATTER ***** -->
 <back>
    <!-- References split into informative and normative -->
   <!-- There are 2 ways to insert reference entries from the citation libraries:
    1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
    2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
       (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

    Both are cited textually in the same manner: by using xref elements.
    If you use the PI option, xml2rfc will, by default, try to find included files in the same
    directory as the including file. You can also define the XML_LIBRARY environment variable
    with a value containing a set of directories to search.  These can be either in the local
    filing system or remote ones accessed by http (http://domain/dir/... ).-->
   <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
          <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
          <?rfc include="reference.RFC.2119.xml"?>
          <!--<?rfc include="reference.RFC.4055.xml"?>-->
          <?rfc include="reference.RFC.5280.xml"?>
          <?rfc include="reference.RFC.5912.xml"?>
          <!--<?rfc include="reference.RFC.5480.xml"?>-->
          <?rfc include="reference.RFC.7468.xml"?>
          <?rfc include="reference.RFC.8174.xml"?>
	  <xi:include href="https://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-salter-lamps-cms-ml-dsa.xml"/>

        <reference anchor="FIPS204" target="https://doi.org/10.6028/NIST.FIPS.204">
          <front>
            <title>FIPS 204: Module-Lattice-Based Digital Signature Standard</title>
            <author initials="G. M." surname="Raimondo" fullname="G. M. Raimondo">
            </author>
            <author initials="L. E." surname="Locascio" fullname="L. E. Locascio">
            </author>
            <date year="2024"/>
          </front>
        <refcontent>National Institute of Standards and Technology</refcontent>
        </reference>
        <reference anchor="X680" target="https://www.itu.int/rec/T-REC-X.680">
          <front>
            <title>Information Technology - Abstract Syntax Notation One (ASN.1):  Specification of basic notation. ITU-T Recommendation X.680 (2021) | ISO/IEC 8824-1:2021.</title>
            <author >
	      <organization>ITU-T</organization>
	    </author>
            <date month="February" year="2021"/>
	  </front>
	</reference>
        <reference anchor="X690" target="https://www.itu.int/rec/T-REC-X.690">
          <front>
            <title>Information technology -- ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER). ITU-T Recommendation X.690 (2021) | ISO/IEC 8825-1:2021.</title>
            <author >
	      <organization>ITU-T</organization>
	    </author>
            <date month="February" year="2021"/>
	  </front>
	</reference>
      </references>
      <references>
        <name>Informative References</name>
          <?rfc include="reference.RFC.3279.xml"?>
          <?rfc include="reference.RFC.5480.xml"?>

     <reference anchor="Dilithium" target="https://pq-crystals.org/dilithium/data/dilithium-specification-round3-20210208.pdf">
          <front>
            <title>CRYSTALS-Dilithium Algorithm Specifications and Supporting Documentation</title>
            <author initials="S." surname="Bai" fullname="S. Bai">
            </author>
            <author initials="L." surname="Ducas" fullname="L. Ducas">
            </author>
            <author initials="T." surname="Lepoint" fullname="T. Lepoint">
            </author>
            <author initials="V." surname="Lyubashevsky" fullname="V. Lyubashevsky">
            </author>
            <author initials="P." surname="Schwabe" fullname="P. Schwabe">
            </author>
            <author initials="G." surname="Seiler" fullname="G. Seiler">
            </author>
            <author initials="D." surname="Stehlé" fullname="D. Stehlé">
            </author>
            <date year="2021"/>
          </front>
        </reference>

        <reference anchor="Fiat-Shamir" target="https://www.iacr.org/archive/asiacrypt2009/59120596/59120596.pdf">
          <front>
            <title>Fiat-Shamir with aborts: Applications to lattice and factoring-based signatures</title>
            <author initials="V." surname="Lyubashevsky" fullname="V. Lyubashevsky">
            </author>
            <date year="2009"/>
          </front>
          <refcontent>International Conference on the Theory and Application of Cryptology and Information Security</refcontent>
        </reference>

        <reference anchor="CDFFJ21" target="https://eprint.iacr.org/2020/1525.pdf">
          <front>
            <title>BUFFing signature schemes beyond unforgeability and the case of post-quantum signatures</title>
            <author initials="Cas" surname="Cremers" fullname="C. Cremers">
            </author>
            <author initials="S." surname="Düzlü" fullname="S. Düzlü">
            </author>
            <author initials="R." surname="Fiedler" fullname="R. Fiedler">
            </author>
            <author initials="M." surname="Fischlin" fullname="M. Fischlin">
            </author>
            <author initials="C." surname="Janson" fullname="C. Janson">
            </author>
            <date year="2021"/>
          </front>
        <refcontent>In Proceedings of the 42nd IEEE Symposium on Security and Privacy</refcontent>
        </reference>

        <reference anchor="NIST-PQC" target="https://csrc.nist.gov/Projects/post-quantum-cryptography">
          <front>
            <title>Post-Quantum Cryptography Project</title>
            <author initials="" surname="National Institute of Standards and Technology (NIST)" fullname="">
              <organization/>
            </author>
            <date year="2016" month="12" day="20"/>
          </front>
        </reference>
        <!--
      <reference anchor="draft-truskovsky-lamps-pq-hybrid-x509-01" target="https://datatracker.ietf.org/doc/html/draft-truskovsky-lamps-pq-hybrid-x509-01">
          <front>
            <title>Multiple Public-Key Algorithm X.509 Certificates</title>
            <author initials="A." surname="Truskovsky" fullname="A. Truskovsky">
            </author>
            <author initials="D." surname="Van Geest" fullname="D. Van Geest">
            </author>
            <author initials="S." surname="Fluhrer" fullname="S. Fluhrer">
            </author>
            <author initials="P." surname="Kampanakis" fullname="P. Kampanakis">
            </author>
            <author initials="M." surname="Ounsworth" fullname="M. Ounsworth">
            </author>
            <author initials="S." surname="Mister" fullname="S. Mister">
            </author>
            <date year="2018" month="August"/>
          </front>
        </reference>
    -->
      </references>
    </references>  <!-- End of References -->

    <section anchor="asn1" numbered="true" toc="default">
      <name>ASN.1 Module</name>
      <t>This section includes the ASN.1 module for the ML-DSA signature algorithm. This module does not come from any previously
	      existing RFC. This module references <xref target="RFC5912" format="default"></xref> and <xref target="I-D.ietf-salter-lamps-cms-ml-dsa"/>.</t>
      <sourcecode type="asn.1" markers="false">
  X509-ML-DSA-2024 { iso(1) identified-organization(3) dod(6)
     internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
     id-mod-x509-ml-dsa-2024(TBD) }

  DEFINITIONS EXPLICIT TAGS ::=

  BEGIN

  -- EXPORTS ALL;

  IMPORTS

  PUBLIC-KEY, SIGNATURE-ALGORITHM
  FROM AlgorithmInformation-2009 -- From [RFC5912]
    { iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) id-mod(0)
      id-mod-algorithmInformation-02(58) }

  id-ML-DSA-44, id-ML-DSA-65, id-ML-DSA-87
  FROM ML-DSA-Module-2024  -- From [I-D.draft-ietf-lamps-cms-ml-dsa]
    { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
      id-smime(16) id-mod(0) iid-mod-ml-dsa-2024(TBD) } ;

  --
  -- Expand SignatureAlgorithms from RFC 5912
  --
  SignatureAlgorithms SIGNATURE-ALGORITHM ::= {
    sa-ml-dsa-44 |
    sa-ml-dsa-65 |
    sa-ml-dsa-87,
    ... }

  --
  -- Expand PublicKeyAlgorithms from RFC 5912
  --
  PublicKeyAlgorithms PUBLIC-KEY ::= {
    pk-ml-dsa-44 |
    pk-ml-dsa-65 |
    pk-ml-dsa-87,
    ... }

  END
      </sourcecode>
    </section>     <!-- End of ASN.1 Module Section -->

    <section anchor="app-additional" numbered="true" toc="default">
      <name>Security Strengths</name>
	<t>Instead of defining the strength of a quantum algorithm
        in a traditional manner using the imprecise notion of bits
        of security, NIST has instead elected to define security
        levels by picking a reference scheme,
        which NIST expects to offer notable levels of resistance
        to both quantum and classical attack.

    To wit, an algorithm that achieves
    NIST PQC security level 1 must require computational
    resources to break the relevant security property,
    which are greater than those required for a brute-force
    key search on AES-128. Levels 3 and 5 use AES-192 and AES-256
        as reference respectively.
    Levels 2 and 4 use collision search for SHA-256 and SHA-384 as reference.</t>
        <t>The parameter sets defined for NIST security levels 2, 3 and 5 are listed in the Figure 1, along with the resulting
		signature size, public key, and private key sizes in bytes.</t>
        <!-- full table, see page 15 of https://pq-crystals.org/dilithium/data/dilithium-specification-round3-20210208.pdf -->
        <!-- [JM] we can consider the usefulness of this table/domain parameter discussion here, since we do not want to include the parameter selection in the document -->
        <!--<figure anchor="DilithiumParameters">
          <artwork align="left" name="" type="" alt=""><![CDATA[
|==========+=====+=========+=======+=====+========+========+========|
| Security |  n  |    q    | (k,l) | eta | gamma1 | Public | Private|
| Level    |     |         |       |     |        | Key(B) | Key(B) |
|==========+=====+=========+=======+=====+========+========+========|
| 2        | 256 | 8380417 | (4,4) |  2  |  2^17  |  1312  |   2528 |
| 3        | 256 | 8380417 | (6,5) |  4  |  2^19  |  1952  |   4000 |
| 5        | 256 | 8380417 | (8,7) |  2  |  2^19  |  2596  |   4864 |
|==========+=====+=========+=======+=====+========+========+========|]]>
          </artwork>
        </figure>-->
        <!--<figure anchor="DilithiumParameters">
          <artwork align="left" name="" type="" alt=""><![CDATA[
|=======+=========+=======+=====+========+======+========+==========|
|Level  |    q    | (k,l) | eta | gamma1 |  Sig.  | Public | Private|
|       |         |       |     |        |  (B)   | Key(B) | Key(B) |
|=======+=========+=======+=====+========+======+========+==========|
| 2     | 8380417 | (4,4) |  2  |  2^17  |  2420  |  1312  |  2528  |
| 3     | 8380417 | (6,5) |  4  |  2^19  |  3293  |  1952  |  4000  |
| 5     | 8380417 | (8,7) |  2  |  2^19  |  4595  |  2596  |  4864  |
|=======+=========+=======+=====+========+======+========+==========|]]>
          </artwork>
        </figure>-->
        <figure anchor="MLS-DSAParameters">
          <artwork align="left" name="" type="" alt=""><![CDATA[
|=======+=======+=====+========+========+========|
| Level | (k,l) | eta |  Sig.  | Public | Private|
|       |       |     |  (B)   | Key(B) | Key(B) |
|=======+=======+=====+========+========+========|
|   2   | (4,4) |  2  |  2420  |  1312  |  32    |
|   3   | (6,5) |  4  |  3309  |  1952  |  32    |
|   5   | (8,7) |  2  |  4627  |  2592  |  32    |
|=======+=======+=====+========+========+========|]]>
          </artwork>
        </figure>
    </section> <!-- End of Security Strengths Section -->

    <section anchor="Examples" numbered="true" toc="default">
      <name>Examples</name>
      <t>This appendix contains examples of ML-DSA public keys, private keys and certificates.</t>
      <section anchor="Examples Public Key" numbered="true" toc="default">
        <name>Example Public Key</name>
          <t>The following is an example of the ML-DSA-44 public key (for the seed 000102…1e1f).</t>
         <!-- examples/ML-DSA-44.pub -->
         <artwork>
-----BEGIN ML-DSA-44 PUBLIC KEY-----
MIIFMTAKBghghkgBZQMEEQOCBSEA17K0clSq4NtF55MNSpjSyX2PE5fReJ2voXAk
sxbpvslPyZRtQvGbeadBO7qjPnFJy0LtURVpOsBB+suYit61/g4dhjEYSZW1ksOX
0ilOLhT5CqQUujgmiZrEP0zMrLwm6agyuVEY1ctDPL75ZgsAE44IF/YediyidMNq
1VTrIqrBFi5KsBrLoeOMTv2PgLZbMz0PcuVd/nHOnB67mInnxWEGwP1zgDoq7P6v
3teqPLLO2lTRK9jNNqeM+XWUO0er0l6ICsRS5XQu0ejRqCr6huWQx1jBWuTShA2S
vKGlCQ9ASWWX/KfYuVE/GhvabpUKqpjeRnUH1KT1pPBZkhZYLDVy9i7aiQWrNYFn
DEoCd3oz4Mpylf2PT/bRoKOnaD1l9fX3/GDaAj6CbF+SFEwC99G6EHWYdVPqk2f8
122ZC3+pnNRa/biDbUPkWfUYffBYR5cJoB6mg1k1+nBGCZDNPcG6QBupS6sd3kGs
Z6szGdysoGBI1MTu8n7hOpwX0FOPQw8tZC3CQVZg3niHfY2KvHJSOXjAQuQoX0MZ
hGxEEmJCl2hEwQ5Va6IVtacZ5Z0MayqW05hZBx/cws3nUkp77a5U6FsxjoVOj+Ky
8+36yXGRKCcKr9HlBEw6T9r9n/MfkHhLjo5FlhRKDa9YZRHT2ZYrnqla8Ze05fxg
8rHtFd46W+9fib3HnZEFHZsoFudPpUUx79wcvnTUSIV/R2vNWPIcC2U7O3ak4Ham
VZowJxhVXMY/dIWaq6uSXwI4YcqM0Pe62yhx9n1VMm10URNa1F9KG6aRGPuyyKMO
7JOS7z+XcGbJrdXHEMxkexUU0hfZWMcBfD6Q/SDATmdLkEhuk3CjGgAdMvRzl55J
BnSefkd/oLdFCPil8jeDErg8Jb04jKCw//dHi69CtxZn7arJfEaxKWQ+WG5bBVoM
IRlG1PNuZ1vtWGD6BCoxXZgmFk1qkjfDWl+/SVSQpb1N8ki5XEqud4S2BWcxZqxC
RbW0sIKgnpMj5i8geMW3Z4NEbe/XNq06NwLUmwiYRJAKYYMzl7xEGbMNepegs4fB
kRR0xNQbU+Mql3rLbw6nXbZbs55Z5wHnaVfe9vLURVnDGncSK1IE47XCGfFoixTt
C8C4AbPm6C3NQ+nA6fQXRM2YFb0byIINi7Ej8E+s0bG2hd1aKxuNu/PtkzZw8JWh
gLTxktCLELj6u9/MKyRRjjLuoKXgyQTKhEeACD87DNLQuLavZ7w1W5SUAl3HsKeP
qA46Lb/rUTKIUdYHgZjpSTZRrnh+wCUfkiujDp9R32Km1yeEzz3SBTkxdt+jJKUS
vZSXCjbdNKUUqGeR8Os28BRbCatkZRtKAxOymWEaKhxIiRYnWYdooxFAYLpEQ0ht
9RUioc6IswmFwhb45u0XjdVnswSg1Mr7qIKig0LxepqiauWNtjAIPSw1j99WbD9d
YqQoVnvJ6ozpXKoPNUdLC/qPM5olCrTfzyCDvo7vvBBV4Y/hU3DuyyYFZtg/8Gsh
Gq7EPKKbVMzQD4gVokZe8LRlFcx+QfMSTwnv/3OTCatYspoUWaALzlA46TjJZ49y
6w5O5f2q5m2fhXP8l/xCtJWfS/i2HXhDPoawM11ukZHE2L9IezkFwQjP1qwksM63
3LfPUfhNDtaHuV6uscUzwG8NlwI9kqcIJYN7Wbpst9TlawqHwgOGKujzFbpZJejt
76Z5NpoiAnZhUfFqll+fgeznbMBwtVhp5NuXhM8FyDCzJCyDEg==
-----END ML-DSA-44 PUBLIC KEY-----
         </artwork>
      <t>An example of an ML-DSA-44 private key for the seed 0001…1e1f is:</t>
     <!-- examples/ML-DSA-44.priv -->
      <section anchor="Examples Public Key" numbered="true" toc="default">
        <name>Example Private Key</name>
          <t>The following is an example of the ML-DSA-44 private key (for the seed 000102…1e1f) encoded using the textual encoding defined in
		 <xref target="RFC7468"/>.</t>
      <artwork>
-----BEGIN ML-DSA-44 PRIVATE KEY-----
MDECAQAwCgYIYIZIAWUDBBEEIAABAgMEBQYHCAkKCwwNDg8QERITFBUWFxgZGhsc
HR4f
-----END ML-DSA-44 PRIVATE KEY-----
      </artwork>
      </section>
      <section anchor="Examples Certificate" numbered="true" toc="default">
        <name>Example Certificate</name>
          <t>The following is an example of a self-signed ML-DSA-44 certificate using id-ml-dsa-44.</t>
      <artwork>
-----BEGIN CERTIFICATE-----
TODO
-----END CERTIFICATR-----
      </artwork>

    </section>  <!-- End of Examples Section -->

    <section anchor="Acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>We would like to thank ... <!--Markuu, Peikert -->for their insightful comments.</t>
    </section>  <!-- End of Acknowledgements Section -->
 
 </back>
</rfc>

<!--
Change log:
24-10-2022 - Based on feedback from John Gray, Markku-Juhani O. Saarinen, and Mike Ounsworth.
  - The DilithiumPrivateKey data structure has been modified, a call out to the OneAsymmetricKey structure has been explicitly made.
  - Multiple placeholders for the various OIDs at differing security levels have been added (we expect these to be id-dilithium2 id-dilithium3 and id-dilithium5, but await NIST for this).
  - A mention of the Dilithium algorithm version number (version 3.1 2021-02-08) has been added - we can add a paragraph discussing more details of various algorithm versions if desired.
  - A typo in Appendix B that incorrectly listed the dilithium5 public key size has been fixed.
  - The discussion of deterministic vs randomized signing has been removed from section 6 as we continue to decide how to address this. On this topic, deterministic vs randomized signing has been added to the security considerations as a place to discuss the security impact of these choices.

02-02-2023
  - Added example Dilithium3 encoded public key.
  - Cleaned up NIST reference and rephrased first introduction paragraph

07-08-2024
  - Addressed John Mattsson's comments.
  - Some alignment with ML-KEM I-D.
  - Editorial changes.
-->
